---
apiVersion: v1
kind: Service
metadata:
  name: etcd-cluster
  namespace: hapostgresql
  labels:
    app: etcd
spec:
  ports:
  - port: 2379
    name: client
  - port: 2380
    name: peer
  clusterIP: None
  selector:
    app: etcd
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: etcd
  namespace: hapostgresql
  labels:
    app: etcd
spec:
  serviceName: etcd-cluster
  replicas: 1
  selector:
    matchLabels:
      app: etcd
  template:
    metadata:
      labels:
        app: etcd
    spec:
      containers:
      - name: etcd
        image: quay.io/coreos/etcd:v3.5.15
        ports:
        - containerPort: 2379
          name: client
        - containerPort: 2380
          name: peer
        env:
        - name: ETCD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
          value: "http://$(ETCD_NAME).etcd-cluster:2380"
        - name: ETCD_LISTEN_PEER_URLS
          value: "http://0.0.0.0:2380"
        - name: ETCD_LISTEN_CLIENT_URLS
          value: "http://0.0.0.0:2379"
        - name: ETCD_ADVERTISE_CLIENT_URLS
          value: "http://$(ETCD_NAME).etcd-cluster:2379"
        - name: ETCD_INITIAL_CLUSTER
          value: "etcd-0=http://etcd-0.etcd-cluster:2380"
        - name: ETCD_INITIAL_CLUSTER_STATE
          value: "new"
        - name: ETCD_INITIAL_CLUSTER_TOKEN
          value: "patroni-cluster"
        - name: ETCD_DATA_DIR
          value: "/etcd-data"
        volumeMounts:
        - name: etcd-data
          mountPath: /etcd-data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 2379
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: etcd-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: etcd-client
  namespace: hapostgresql
  labels:
    app: etcd
spec:
  ports:
  - port: 2379
    name: client
  selector:
    app: etcd
---
# NodePort service to expose etcd to Docker containers (Development)
apiVersion: v1
kind: Service
metadata:
  name: etcd-nodeport
  namespace: hapostgresql
  labels:
    app: etcd
spec:
  type: NodePort
  ports:
  - port: 2379
    targetPort: 2379
    nodePort: 32379
    name: client
  selector:
    app: etcd
---
# LoadBalancer service for production (uncomment if using cloud provider)
# This creates an external TCP load balancer - NO INGRESS NEEDED
# apiVersion: v1
# kind: Service
# metadata:
#   name: etcd-loadbalancer
#   namespace: hapostgresql
#   labels:
#     app: etcd
#   annotations:
#     # Cloud provider specific annotations (optional)
#     # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # AWS Network LB
#     # cloud.google.com/load-balancer-type: "External"    d etc      # GCP External LB
# spec:
#   type: LoadBalancer
#   ports:
#   - port: 2379
#     targetPort: 2379
#     protocol: TCP        # ‚Üê Explicit TCP protocol
#     name: client
#   selector:
#     app: etcd
