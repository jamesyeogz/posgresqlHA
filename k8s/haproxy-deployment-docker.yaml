---
apiVersion: v1
kind: Namespace
metadata:
  name: hapostgresql
  labels:
    name: hapostgresql
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: hapostgresql
  labels:
    app: haproxy
data:
  haproxy.cfg: |
    global
        maxconn 100
        log stdout local0

    defaults
        log global
        mode tcp
        retries 2
        timeout client 30m
        timeout connect 4s
        timeout server 30m
        timeout check 5s

    # Stats interface (no auth for health checks)
    listen stats
        mode http
        bind *:7000
        stats enable
        stats uri /
        stats refresh 30s
        stats realm HAProxy\ Statistics
        # No authentication required for K8s health checks
        # stats auth admin:password

    # Health check endpoint (for K8s probes)
    listen health
        mode http
        bind *:7001
        monitor-uri /health

    # PostgreSQL Master (Read/Write)
    # Connects to Docker-based Patroni instances via Minikube host gateway
    listen postgres_master
        bind *:5432
        option httpchk GET /master
        http-check expect status 200
        default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
        # Using Minikube host gateway (host.minikube.internal = 192.168.65.254)
        server patroni-vm1 192.168.65.254:5432 maxconn 100 check port 8008
        server patroni-vm2 192.168.65.254:5433 maxconn 100 check port 8009
        server patroni-vm3 192.168.65.254:5434 maxconn 100 check port 8010

    # PostgreSQL Replicas (Read Only)
    listen postgres_replicas
        bind *:5001
        option httpchk GET /replica
        http-check expect status 200
        balance roundrobin
        default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
        server patroni-vm1 192.168.65.254:5432 maxconn 100 check port 8008
        server patroni-vm2 192.168.65.254:5433 maxconn 100 check port 8009
        server patroni-vm3 192.168.65.254:5434 maxconn 100 check port 8010
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy
  namespace: hapostgresql
  labels:
    app: haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      containers:
        - name: haproxy
          image: haproxy:2.8-alpine
          ports:
            - containerPort: 5432
              name: postgres
            - containerPort: 5001
              name: pg-replica
            - containerPort: 7000
              name: stats
            - containerPort: 7001
              name: health
          volumeMounts:
            - name: haproxy-config
              mountPath: /usr/local/etc/haproxy
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /health
              port: 7001
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 7001
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: haproxy-config
          configMap:
            name: haproxy-config
---
# NodePort Service for HAProxy (for Minikube and development)
apiVersion: v1
kind: Service
metadata:
  name: haproxy-nodeport
  namespace: hapostgresql
  labels:
    app: haproxy
spec:
  type: NodePort
  selector:
    app: haproxy
  ports:
    - port: 5432
      targetPort: 5432
      nodePort: 30432
      protocol: TCP
      name: postgres
    - port: 5001
      targetPort: 5001
      nodePort: 30001
      protocol: TCP
      name: pg-replica
    - port: 7000
      targetPort: 7000
      nodePort: 30700
      protocol: TCP
      name: stats
---
# LoadBalancer Service for HAProxy (for production cloud deployments)
# Use this service type for AWS EKS, GCP GKE, Azure AKS, or any cloud with LoadBalancer support
apiVersion: v1
kind: Service
metadata:
  name: haproxy-loadbalancer
  namespace: hapostgresql
  labels:
    app: haproxy
spec:
  type: LoadBalancer
  selector:
    app: haproxy
  # Optional: Specify loadBalancerSourceRanges to restrict access
  # loadBalancerSourceRanges:
  #   - 10.0.0.0/8      # Allow from private network
  #   - 203.0.113.0/24  # Allow from specific public IP range
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
    - port: 5001
      targetPort: 5001
      protocol: TCP
      name: pg-replica
    - port: 7000
      targetPort: 7000
      protocol: TCP
      name: stats
  # Optional: Preserve client source IP (may not be supported on all clouds)
  # externalTrafficPolicy: Local
  # sessionAffinity: ClientIP
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800

