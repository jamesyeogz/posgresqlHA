---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: hapostgresql
  labels:
    app: haproxy
data:
  haproxy.cfg: |
    global
        maxconn 100
        log stdout local0
        # Consul integration
        stats socket /var/run/haproxy.sock mode 660 level admin
        stats timeout 30s

    defaults
        log global
        mode tcp
        retries 2
        timeout client 30m
        timeout connect 4s
        timeout server 30m
        timeout check 5s

    # Stats interface
    listen stats
        mode http
        bind *:7000
        stats enable
        stats uri /
        stats refresh 30s
        stats realm HAProxy\ Statistics
        stats auth admin:password

    # PostgreSQL Master (Read/Write) - Using Consul service discovery
    listen postgres_master
        bind *:5432
        option httpchk GET /master
        http-check expect status 200
        default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
        # Dynamic server discovery via Consul
        server-template patroni-postgres- 3 _patroni-postgres._tcp.service.consul:5432 check port 8008 resolvers consul resolve-prefer ipv4

    # PostgreSQL Replicas (Read Only) - Using Consul service discovery
    listen postgres_replicas
        bind *:5001
        option httpchk GET /replica
        http-check expect status 200
        balance roundrobin
        default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions
        # Dynamic server discovery via Consul
        server-template patroni-postgres- 3 _patroni-postgres._tcp.service.consul:5432 check port 8008 resolvers consul resolve-prefer ipv4

    # Consul resolver configuration
    resolvers consul
        nameserver consul-ui.consul.svc.cluster.local 8600:53
        accepted_payload_size 8192
        hold other 30s
        hold refused 30s
        hold nx 30s
        hold timeout 30s
        hold valid 10s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy
  namespace: hapostgresql
  labels:
    app: haproxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      initContainers:
        - name: setup-config
          image: busybox:1.35
          command: ["sh", "-c"]
          args:
            - |
              echo "HAProxy configuration ready for Consul service discovery"
              cp /tmp/haproxy-template/haproxy.cfg /tmp/haproxy-config/haproxy.cfg
              cat /tmp/haproxy-config/haproxy.cfg
          volumeMounts:
            - name: haproxy-config-template
              mountPath: /tmp/haproxy-template
            - name: haproxy-config-processed
              mountPath: /tmp/haproxy-config
      containers:
        - name: haproxy
          image: haproxy:2.8-alpine
          ports:
            - containerPort: 5001
              name: pg-replica
            - containerPort: 5432
              name: postgres
            - containerPort: 7000
              name: stats
          volumeMounts:
            - name: haproxy-config-processed
              mountPath: /usr/local/etc/haproxy
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /
              port: 7000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 7000
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: haproxy-config-template
          configMap:
            name: haproxy-config
        - name: haproxy-config-processed
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy
  namespace: hapostgresql
  labels:
    app: haproxy
spec:
  selector:
    app: haproxy
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
    - port: 5001
      targetPort: 5001
      name: pg-replica
    - port: 7000
      targetPort: 7000
      name: stats
---
# Service for PostgreSQL Master (Read/Write)
apiVersion: v1
kind: Service
metadata:
  name: postgres-master
  namespace: hapostgresql
  labels:
    app: postgres
    role: master
spec:
  selector:
    app: haproxy
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
---
# Service for PostgreSQL Replicas (Read Only)
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: hapostgresql
  labels:
    app: postgres
    role: replica
spec:
  selector:
    app: haproxy
  ports:
    - port: 5432
      targetPort: 5001
      name: postgres
---
# HAProxy Stats Service
apiVersion: v1
kind: Service
metadata:
  name: haproxy-stats
  namespace: hapostgresql
  labels:
    app: haproxy
spec:
  selector:
    app: haproxy
  ports:
    - port: 7000
      targetPort: 7000
      name: stats
---
# HAProxy LoadBalancer Service for Production
apiVersion: v1
kind: Service
metadata:
  name: haproxy-loadbalancer
  namespace: hapostgresql
  labels:
    app: haproxy
  annotations:
    # Cloud provider specific annotations (optional)
    # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # AWS Network LB
    # cloud.google.com/load-balancer-type: "External"           # GCP External LB
spec:
  type: LoadBalancer
  selector:
    app: haproxy
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
    - port: 5001
      targetPort: 5001
      protocol: TCP
      name: pg-replica
    - port: 7000
      targetPort: 7000
      protocol: TCP
      name: stats
