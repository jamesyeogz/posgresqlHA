# Supabase Helm Chart Values for HAProxy -> Patroni HA PostgreSQL Cluster
# This configuration connects Supabase services to Patroni via HAProxy LoadBalancer in Kubernetes

secret:
  jwt:
    anonKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
    serviceKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
    secret: your-super-secret-jwt-token-with-at-least-32-characters-long
  smtp:
    username: your-mail@example.com
    password: example123456
  dashboard:
    username: supabase
    password: this_password_is_insecure_and_should_be_updated
  db:
    username: postgres
    password: mysecurepassword123  # Matches POSTGRES_PASSWORD from env.local
    database: postgres
  analytics:
    apiKey: your-super-secret-and-long-logflare-key

# Disable built-in PostgreSQL - using external Patroni cluster via HAProxy
db:
  enabled: false

# Override database connections for all services to use HAProxy LoadBalancer service
# Using Kubernetes internal service name for LoadBalancer
auth:
  environment:
    DB_HOST: haproxy-loadbalancer.hapostgresql.svc.cluster.local
    DB_PORT: "5432"
    DB_USER: postgres
    DB_NAME: postgres
    DB_SSL: "disable"
    API_EXTERNAL_URL: http://localhost:8000
    GOTRUE_SITE_URL: http://localhost:3000
    GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
    GOTRUE_MAILER_AUTOCONFIRM: "true"
    GOTRUE_SMTP_ADMIN_EMAIL: "your-mail@example.com"
    GOTRUE_SMTP_HOST: "smtp.example.com"
    GOTRUE_SMTP_PORT: "587"
    GOTRUE_SMTP_SENDER_NAME: "your-mail@example.com"

rest:
  environment:
    DB_HOST: haproxy-loadbalancer.hapostgresql.svc.cluster.local
    DB_PORT: "5432"
    DB_USER: postgres
    DB_NAME: postgres
    DB_SSL: "disable"
    PGRST_DB_SCHEMAS: "public,storage,graphql_public"
    PGRST_DB_ANON_ROLE: "anon"

realtime:
  environment:
    DB_HOST: haproxy-loadbalancer.hapostgresql.svc.cluster.local
    DB_PORT: "5432"
    DB_USER: postgres
    DB_NAME: postgres
    DB_SSL: "disable"

meta:
  environment:
    DB_HOST: haproxy-loadbalancer.hapostgresql.svc.cluster.local
    DB_PORT: "5432"
    DB_USER: postgres
    DB_NAME: postgres
    DB_SSL: "disable"

storage:
  environment:
    DB_HOST: haproxy-loadbalancer.hapostgresql.svc.cluster.local
    DB_PORT: "5432"
    DB_USER: postgres
    DB_NAME: postgres
    DB_SSL: "disable"
  persistence:
    enabled: true
    size: 10Gi

analytics:
  environment:
    DB_HOST: haproxy-loadbalancer.hapostgresql.svc.cluster.local
    DB_PORT: "5432"
    DB_USERNAME: postgres
    DB_DATABASE: postgres
    DB_SSL: "disable"

functions:
  environment:
    DB_HOST: haproxy-loadbalancer.hapostgresql.svc.cluster.local
    DB_PORT: "5432"
    DB_USERNAME: postgres
    DB_DATABASE: postgres
    DB_SSL: "disable"

# Studio configuration
studio:
  environment:
    STUDIO_DEFAULT_ORGANIZATION: "Patroni HA Organization"
    STUDIO_DEFAULT_PROJECT: "PostgreSQL HA Project"
    SUPABASE_PUBLIC_URL: http://localhost:8000
    NEXT_PUBLIC_ENABLE_LOGS: "true"
    NEXT_ANALYTICS_BACKEND_PROVIDER: postgres

# Kong ingress configuration (for Minikube - using NodePort)
kong:
  service:
    type: NodePort
  ingress:
    enabled: false

